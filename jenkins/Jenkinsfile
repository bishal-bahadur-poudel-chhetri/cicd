pipeline {
    agent any
    parameters {
        choice(name: 'ENV', choices: ['dev', 'prod'], description: 'Choose the environment')
        string(name: 'VERSION', defaultValue: '1.0.0', description: 'Version of the application')
        string(name: 'DOCKER_REGISTRY', defaultValue: 'bsal694', description: 'Name of the Docker registry')
    }
    environment {
        KUBE_NAMESPACE = "${params.ENV}"
    }
    stages {
        stage('Code Initialization') {
            steps {
                git branch: 'main', credentialsId: 'github-credential', url: 'https://github.com/bishal-bahadur-poudel-chhetri/cicd-frontend.git'
            
                echo "Current branch is: ${env.GIT_BRANCH}"
            }
        }
        stage('Extract Version from package.json') {
            steps {
                script {
                    def packageJson = readJSON file: 'frontend/package.json'
                    VERSION = packageJson.version
                    echo "Version from package.json: ${VERSION}"
                }
            }
        }
        stage('Update Version for Branch') {
            steps {
                 script {
                    // Initialize VERSION variable if not already set
                    if (!VERSION) {
                        VERSION = '1.0.0' // Default version or set according to your needs
                    }
                
                    // Check if BRANCH_NAME is null or empty
                    if (env.BRANCH_NAME == null || env.BRANCH_NAME.trim() == '') {
                        echo "Branch name is not available, using default version."
                        VERSION = "${VERSION}-unknown"  // You can set this to any default you'd prefer
                    } else {
                        // Check if the branch is 'main'
                        if (env.BRANCH_NAME == 'main') {
                            VERSION = "${VERSION}-stable"
                        }
                        // Check if the branch starts with 'feature'
                        else if (env.BRANCH_NAME.startsWith('feature')) {
                            VERSION = "${VERSION}-feature-${env.BRANCH_NAME.split('/')[1]}"
                        } else {
                            // Default to 'dev' for other branches
                            VERSION = "${VERSION}--dev"
                        }
                    }
                
                    // Output the final version
                    echo "Final version: ${VERSION}"
                }

            }
        }

        stage('push to docker hub') {
            steps {
                script {
                    def finalVersion = "${params.VERSION}-${params.ENV}"
                    withCredentials([usernamePassword(credentialsId: 'dockerhub-credential', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        dir('frontend') {
                            sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                            sh "docker build -t ${params.DOCKER_REGISTRY}/frontend:${finalVersion} ."
                            echo "Built Docker image: ${params.DOCKER_REGISTRY}/frontend:${finalVersion}"
                            sh "docker push ${params.DOCKER_REGISTRY}/frontend:${finalVersion}"
                            echo "Pushed Docker image: ${params.DOCKER_REGISTRY}/frontend:${finalVersion}"
                                
                        }
                        dir('backend') {
                            sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                            sh "docker build -t ${params.DOCKER_REGISTRY}/frontend:${finalVersion} ."
                            echo "Built Docker image: ${params.DOCKER_REGISTRY}/frontend:${finalVersion}"
                            sh "docker push ${params.DOCKER_REGISTRY}/frontend:${finalVersion}"
                            echo "Pushed Docker image: ${params.DOCKER_REGISTRY}/frontend:${finalVersion}"
                                
                        }
                        
                    }
                }
                 
                        
            
            }
            
        }
        stage('Deployment') {
            steps {
                script {
                    def finalVersion = "${params.VERSION}-${params.ENV}"
                    kubeconfig(credentialsId: 'kubernetes-credential', serverUrl: 'http://3.87.119.13:6443') {
                        dir('kubernetes') {
                            sh 'kubectl apply -f deployment.yml -n production'
                        }

                    }
                }
                 
                        
            
            }
            
        }
    }    
}
